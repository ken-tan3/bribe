generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Country {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?  @db.VarChar(255)
  bribes    Bribe[]
  users     User[]
}

model Bribe {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  what               String?    @db.VarChar(255)
  who                String?    @db.VarChar(255)
  googleMapAddress   String?    @db.VarChar(255)
  googleMapLatitude  Float?     @db.Float
  googleMapLongitude Float?     @db.Float
  when               DateTime?  @db.Date
  goods              String?    @db.VarChar(255)
  howMuch            Int?
  howMuchIsoCode     String?    @db.TinyText
  note               String?    @db.Text
  countries          Country[]
  comments           Comment[]
  reactions          Reaction[]
  user               User       @relation(fields: [userId], references: [id])
  userId             String

  @@index([userId])
}

model Comment {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  comment               String?  @db.Text
  reactionWhenCommented Int
  user                  User     @relation(fields: [userId], references: [id])
  userId                String
  bribe                 Bribe    @relation(fields: [bribeId], references: [id])
  bribeId               String

  @@index([userId, bribeId])
}

model Reaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reaction  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  bribe     Bribe    @relation(fields: [bribeId], references: [id])
  bribeId   String

  @@index([userId, bribeId])
}

model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String?    @db.VarChar(255)
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  emoji         String?
  nickName      String?
  bribes        Bribe[]
  comments      Comment[]
  reactions     Reaction[]
  accounts      Account[]
  sessions      Session[]
  country       Country    @relation(fields: [countryId], references: [id])
  countryId     String     @default("global")

  @@index([countryId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BribeToCountry {
  A String
  B String

  @@unique([A, B], map: "_BribeToCountry_AB_unique")
  @@index([B], map: "_BribeToCountry_B_index")
  @@map("_BribeToCountry")
}
